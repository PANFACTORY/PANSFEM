//*****************************************************************************
//Title		:PANSFEM/Core/ShapeFunction/Parametric/Cubic2/Cubic2.cpp
//Author	:Tanabe Yuta
//Date		:2019/07/11
//Copyright	:(C)2019 TanabeYuta
//*****************************************************************************


#include "Cubic2.h"


PANSFEM::Cubic2::Cubic2() {}


PANSFEM::Cubic2::~Cubic2(){}


Eigen::VectorXd PANSFEM::Cubic2::Trial(std::vector<Node*> _pnodes, std::vector<double> _xi){
	Eigen::VectorXd n = Eigen::VectorXd(20);
	n(0) = -0.125*(1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2])*(2.0 + _xi[0] + _xi[1] + _xi[2]);
	n(1) = -0.125*(1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2])*(2.0 - _xi[0] + _xi[1] + _xi[2]);
	n(2) = -0.125*(1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2])*(2.0 - _xi[0] - _xi[1] + _xi[2]);
	n(3) = -0.125*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2])*(2.0 + _xi[0] - _xi[1] + _xi[2]);
	n(4) = -0.125*(1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2])*(2.0 + _xi[0] + _xi[1] - _xi[2]);
	n(5) = -0.125*(1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2])*(2.0 - _xi[0] + _xi[1] - _xi[2]);
	n(6) = -0.125*(1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2])*(2.0 - _xi[0] - _xi[1] - _xi[2]);
	n(7) = -0.125*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2])*(2.0 + _xi[0] - _xi[1] - _xi[2]);
	n(8) = 0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2]);
	n(9) = 0.25*(1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 - _xi[2]);
	n(10) = 0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2]);
	n(11) = 0.25*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 - _xi[2]);
	n(12) = 0.25*(1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	n(13) = 0.25*(1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	n(14) = 0.25*(1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	n(15) = 0.25*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	n(16) = 0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2]);
	n(17) = 0.25*(1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 + _xi[2]);
	n(18) = 0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2]);
	n(19) = 0.25*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 + _xi[2]);
	return n;
}


Eigen::MatrixXd PANSFEM::Cubic2::dTrialdx(std::vector<Node*> _pnodes, std::vector<double> _xi){
	Eigen::MatrixXd dndxi = Eigen::MatrixXd(3, 20);
	dndxi(0, 0) = -0.125*(-(1.0 - _xi[1])*(1.0 - _xi[2])*(2.0 + _xi[0] + _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2]));
	dndxi(0, 1) = -0.125*((1.0 - _xi[1])*(1.0 - _xi[2])*(2.0 - _xi[0] + _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2]));
	dndxi(0, 2) = -0.125*((1.0 + _xi[1])*(1.0 - _xi[2])*(2.0 - _xi[0] - _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2]));
	dndxi(0, 3) = -0.125*(-(1.0 + _xi[1])*(1.0 - _xi[2])*(2.0 + _xi[0] - _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2]));
	dndxi(0, 4) = -0.125*(-(1.0 - _xi[1])*(1.0 + _xi[2])*(2.0 + _xi[0] + _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2]));
	dndxi(0, 5) = -0.125*((1.0 - _xi[1])*(1.0 + _xi[2])*(2.0 - _xi[0] + _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2]));
	dndxi(0, 6) = -0.125*((1.0 + _xi[1])*(1.0 + _xi[2])*(2.0 - _xi[0] - _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2]));
	dndxi(0, 7) = -0.125*(-(1.0 + _xi[1])*(1.0 + _xi[2])*(2.0 + _xi[0] - _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2]));
	dndxi(0, 8) = -0.5*_xi[0] * (1.0 - _xi[1])*(1.0 - _xi[2]);
	dndxi(0, 9) = 0.25*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 - _xi[2]);
	dndxi(0, 10) = -0.5*_xi[0] * (1.0 + _xi[1])*(1.0 - _xi[2]);
	dndxi(0, 11) = -0.25*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 - _xi[2]);
	dndxi(0, 12) = -0.25*(1.0 - _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	dndxi(0, 13) = 0.25*(1.0 - _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	dndxi(0, 14) = 0.25*(1.0 + _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	dndxi(0, 15) = -0.25*(1.0 + _xi[1])*(1.0 + _xi[2])*(1.0 - _xi[2]);
	dndxi(0, 16) = -0.5*_xi[0] * (1.0 - _xi[1])*(1.0 + _xi[2]);
	dndxi(0, 17) = 0.25*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 + _xi[2]);
	dndxi(0, 18) = -0.5*_xi[0] * (1.0 + _xi[1])*(1.0 + _xi[2]);
	dndxi(0, 19) = -0.25*(1.0 + _xi[1])*(1.0 - _xi[1])*(1.0 + _xi[2]);
	
	dndxi(1, 0) = -0.125*(-(1.0 - _xi[2])*(1.0 - _xi[0])*(2.0 + _xi[0] + _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2]));
	dndxi(1, 1) = -0.125*(-(1.0 - _xi[2])*(1.0 + _xi[0])*(2.0 - _xi[0] + _xi[1] + _xi[2]) + (1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2]));
	dndxi(1, 2) = -0.125*((1.0 - _xi[2])*(1.0 + _xi[0])*(2.0 - _xi[0] - _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2]));
	dndxi(1, 3) = -0.125*((1.0 - _xi[2])*(1.0 - _xi[0])*(2.0 + _xi[0] - _xi[1] + _xi[2]) - (1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2]));
	dndxi(1, 4) = -0.125*(-(1.0 + _xi[2])*(1.0 - _xi[0])*(2.0 + _xi[0] + _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2]));
	dndxi(1, 5) = -0.125*(-(1.0 + _xi[2])*(1.0 + _xi[0])*(2.0 - _xi[0] + _xi[1] + _xi[2]) + (1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2]));
	dndxi(1, 6) = -0.125*((1.0 + _xi[2])*(1.0 + _xi[0])*(2.0 - _xi[0] - _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2]));
	dndxi(1, 7) = -0.125*((1.0 + _xi[2])*(1.0 - _xi[0])*(2.0 + _xi[0] - _xi[1] + _xi[2]) - (1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2]));
	dndxi(1, 8) = -0.25*(1.0 - _xi[2])*(1.0 + _xi[0])*(1.0 - _xi[0]);
	dndxi(1, 9) = -0.5*_xi[1]*(1.0 - _xi[2])*(1.0 + _xi[0]);
	dndxi(1, 10) = 0.25*(1.0 - _xi[2])*(1.0 + _xi[0])*(1.0 - _xi[0]);
	dndxi(1, 11) = -0.5*_xi[1]*(1.0 - _xi[2])*(1.0 - _xi[0]);
	dndxi(1, 12) = -0.25*(1.0 + _xi[2])*(1.0 - _xi[2])*(1.0 - _xi[0]);
	dndxi(1, 13) = -0.25*(1.0 + _xi[2])*(1.0 - _xi[2])*(1.0 + _xi[0]);
	dndxi(1, 14) = 0.25*(1.0 + _xi[2])*(1.0 - _xi[2])*(1.0 + _xi[0]);
	dndxi(1, 15) = 0.25*(1.0 + _xi[2])*(1.0 - _xi[2])*(1.0 - _xi[0]);
	dndxi(1, 16) = -0.25*(1.0 + _xi[2])*(1.0 + _xi[0])*(1.0 - _xi[0]);
	dndxi(1, 17) = -0.5*_xi[1]*(1.0 + _xi[2])*(1.0 + _xi[0]);
	dndxi(1, 18) = 0.25*(1.0 + _xi[2])*(1.0 + _xi[0])*(1.0 - _xi[0]);
	dndxi(1, 19) = -0.5*_xi[1]*(1.0 + _xi[2])*(1.0 - _xi[0]);
	
	dndxi(2, 0) = -0.125*(-(1.0 - _xi[0])*(1.0 - _xi[1])*(2.0 + _xi[0] + _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2]));
	dndxi(2, 1) = -0.125*(-(1.0 + _xi[0])*(1.0 - _xi[1])*(2.0 - _xi[0] + _xi[1] + _xi[2]) + (1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 - _xi[2]));
	dndxi(2, 2) = -0.125*(-(1.0 + _xi[0])*(1.0 + _xi[1])*(2.0 - _xi[0] - _xi[1] + _xi[2]) + (1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2]));
	dndxi(2, 3) = -0.125*(-(1.0 - _xi[0])*(1.0 + _xi[1])*(2.0 + _xi[0] - _xi[1] + _xi[2]) + (1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[2]));
	dndxi(2, 4) = -0.125*((1.0 - _xi[0])*(1.0 - _xi[1])*(2.0 + _xi[0] + _xi[1] + _xi[2]) - (1.0 - _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2]));
	dndxi(2, 5) = -0.125*((1.0 + _xi[0])*(1.0 - _xi[1])*(2.0 - _xi[0] + _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 - _xi[1])*(1.0 + _xi[2]));
	dndxi(2, 6) = -0.125*((1.0 + _xi[0])*(1.0 + _xi[1])*(2.0 - _xi[0] - _xi[1] + _xi[2]) - (1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2]));
	dndxi(2, 7) = -0.125*((1.0 - _xi[0])*(1.0 + _xi[1])*(2.0 + _xi[0] - _xi[1] + _xi[2]) - (1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 + _xi[2]));
	dndxi(2, 8) = -0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 - _xi[1]);
	dndxi(2, 9) = -0.25*(1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1]);
	dndxi(2, 10) = -0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 + _xi[1]);
	dndxi(2, 11) = -0.25*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1]);
	dndxi(2, 12) = -0.5*_xi[2]*(1.0 - _xi[0])*(1.0 - _xi[1]);
	dndxi(2, 13) = -0.5*_xi[2]*(1.0 + _xi[0])*(1.0 - _xi[1]);
	dndxi(2, 14) = -0.5*_xi[2]*(1.0 + _xi[0])*(1.0 + _xi[1]);
	dndxi(2, 15) = -0.5*_xi[2]*(1.0 - _xi[0])*(1.0 + _xi[1]);
	dndxi(2, 16) = 0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 - _xi[1]);
	dndxi(2, 17) = 0.25*(1.0 + _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1]);
	dndxi(2, 18) = 0.25*(1.0 + _xi[0])*(1.0 - _xi[0])*(1.0 + _xi[1]);
	dndxi(2, 19) = 0.25*(1.0 - _xi[0])*(1.0 + _xi[1])*(1.0 - _xi[1]);
	return dndxi;
}


Eigen::VectorXd PANSFEM::Cubic2::Test(std::vector<Node*> _pnodes, std::vector<double> _xi){
	return this->Trial(_pnodes, _xi);
}


Eigen::MatrixXd PANSFEM::Cubic2::dTestdx(std::vector<Node*> _pnodes, std::vector<double> _xi){
	return this->dTrialdx(_pnodes, _xi);
}